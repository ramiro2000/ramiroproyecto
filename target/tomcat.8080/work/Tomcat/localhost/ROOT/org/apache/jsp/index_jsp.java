/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.16
 * Generated at: 2019-03-12 17:58:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<link rel=\"stylesheet\" type=\"text/css\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css \">\r\n");
      out.write("<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"> </script>\r\n");
      out.write("<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\"> </script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body bgcolor = \"pink\">\r\n");
      out.write("  <div class=\"container\">\r\n");
      out.write("    <h2>Hola esta es una pagina hecha de parte de Ramiro</h2>\r\n");
      out.write("    <h5>Nota: Tendremos que crear cuenta en algunas paginas y descargar algunos software para poder continuar con el proceso. </h5>\r\n");
      out.write("    <h3>Estos son los pasos que se deben de llevar a cabo para poder crear tu propia pagina en Heroku</h3>\r\n");
      out.write("    <h5>Pasos a seguir: </h5>\r\n");
      out.write("    <li> 1-Darte de alta en github.com </li>\r\n");
      out.write("    <li> 2-Descargar git bash Windows version </li>\r\n");
      out.write("    <li> 3-Crear una cuenta en Heroku </li>\r\n");
      out.write("    <h3> Una vez hechos los pasos anteriores vamos a continuar con la estructura de tu pagina. <h3>\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("      <div class=\"row\">\r\n");
      out.write("        <div class=\"col-lg-4 col-md-4 col-sm-12 col-xs-12\">\r\n");
      out.write("           -Titulo\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"col-lg-4 col-md-4 col-sm-12 col-xs-12\">\r\n");
      out.write("            -Información\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"col-lg-4 col-md-4 col-sm-12 col-xs-12\">\r\n");
      out.write("            -Estilo\r\n");
      out.write("        </div>\r\n");
      out.write("      </div>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <p> El titulo es el nombre que llevara el encabezado de tu pagina. </p>\r\n");
      out.write("    <p> La información es todo aquello que quieres que muestrar en tu pagina. </p>\r\n");
      out.write("    <p> Estilo es el como quieres ver tu pagina, ya sea el tamaño de letra , color de fondo, posición de la informacion, etc. </p>\r\n");
      out.write("\r\n");
      out.write("    <div class= \"container\">\r\n");
      out.write("    <h3>Ahora comenzaremos creando una app en Heroku <h3>\r\n");
      out.write("    <li>-Debemos iniciar sesión en Heroku </li>\r\n");
      out.write("    <li>-Despues abrir  </li>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("    <h2>Acontinuación veras algunos de los comandos y sus funciones. </h2>\r\n");
      out.write("    <h3>Tamaño de letra</h3>\r\n");
      out.write("    <ul>\r\n");
      out.write("      <li> < h1 >< /h1 > Sirve para hacer el tamaño de letra grande. </li>\r\n");
      out.write("      <li> < h2 >< /h2 > Sirve para hacer el tamaño de medio grande. </li>\r\n");
      out.write("      <li> < h3 >< /h3 > Sirve para hacer el tamaño de medio. </li>\r\n");
      out.write("      <li> < h4 >< /h4 > Sirve para hacer el tamaño de medio chica. </li>\r\n");
      out.write("      <li> < h5 >< /h5 > Sirve para hacer el tamaño de letra chica. </li>\r\n");
      out.write("    </ul>\r\n");
      out.write("    <div class=\"Listo ya has creado tu primer pagina en Heroku\" role=\"alert\">\r\n");
      out.write("            Listo ya has creado tu primer pagina en Heroku\r\n");
      out.write("    </div>\r\n");
      out.write("  </div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
